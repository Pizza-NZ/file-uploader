package services

import (
	"bytes"
	"context"
	"errors"
	"mime/multipart"
	"testing"

	"github.com/pizza-nz/file-uploader/storage"
	"github.com/stretchr/testify/assert"
)

// Mocking multipart.File
type mockMultipartFile struct {
	*bytes.Reader
}

func (m *mockMultipartFile) Close() error {
	return nil
}

func (m *mockMultipartFile) ReadAt(p []byte, off int64) (n int, err error) {
	return m.Reader.ReadAt(p, off)
}

func TestCreateFileUpload_Success(t *testing.T) {
	mockFileStorage := new(storage.MockFileStorage)

	// Create a dummy file content for a JPEG (1x1 black pixel)
	fileContent := []byte{
		0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
		0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
		0x00, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x03,
		0x03, 0x03, 0x03, 0x04, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x06,
		0x06, 0x05, 0x06, 0x09, 0x08, 0x0a, 0x0a, 0x09, 0x08, 0x09, 0x09, 0x0a,
		0x0c, 0x0f, 0x0c, 0x0a, 0x0b, 0x0e, 0x0b, 0x09, 0x09, 0x0d, 0x11, 0x0d,
		0x0e, 0x0f, 0x10, 0x10, 0x11, 0x10, 0x0a, 0x0c, 0x12, 0x13, 0x12, 0x10,
		0x13, 0x0f, 0x10, 0x10, 0x10, 0xff, 0xc9, 0x00, 0x0b, 0x08, 0x00, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0xff, 0xcc, 0x00, 0x06, 0x00, 0x01,
		0x01, 0x00, 0xff, 0xda, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 0x3f, 0x00,
		0xd2, 0xc2, 0x01, 0xff, 0xd9,
	}
	file := &mockMultipartFile{bytes.NewReader(fileContent)}
	handler := &multipart.FileHeader{
		Filename: "test.jpg",
		Size:     int64(len(fileContent)),
	}

	service := NewFileUploadService(mockFileStorage)

	mockFileStorage.On("Upload", context.TODO(), file, handler).Return("some-object-key", nil)

	response, err := service.CreateFileUpload(file, handler)

	assert.NoError(t, err)
	assert.NotNil(t, response)
	assert.Equal(t, "some-object-key", response.FileID)
	assert.Equal(t, int64(len(fileContent)), response.Size)

	mockFileStorage.AssertExpectations(t)
}

func TestCreateFileUpload_StorageError(t *testing.T) {
	mockFileStorage := new(storage.MockFileStorage)

	// Create a dummy file content for a JPEG (1x1 black pixel)
	fileContent := []byte{
		0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
		0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
		0x00, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x03,
		0x03, 0x03, 0x03, 0x04, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x06,
		0x06, 0x05, 0x06, 0x09, 0x08, 0x0a, 0x0a, 0x09, 0x08, 0x09, 0x09, 0x0a,
		0x0c, 0x0f, 0x0c, 0x0a, 0x0b, 0x0e, 0x0b, 0x09, 0x09, 0x0d, 0x11, 0x0d,
		0x0e, 0x0f, 0x10, 0x10, 0x11, 0x10, 0x0a, 0x0c, 0x12, 0x13, 0x12, 0x10,
		0x13, 0x0f, 0x10, 0x10, 0x10, 0xff, 0xc9, 0x00, 0x0b, 0x08, 0x00, 0x01,
		0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0xff, 0xcc, 0x00, 0x06, 0x00, 0x01,
		0x01, 0x00, 0xff, 0xda, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 0x3f, 0x00,
		0xd2, 0xc2, 0x01, 0xff, 0xd9,
	}
	file := &mockMultipartFile{bytes.NewReader(fileContent)}
	handler := &multipart.FileHeader{
		Filename: "test.jpg",
		Size:     int64(len(fileContent)),
	}

	service := NewFileUploadService(mockFileStorage)

	mockFileStorage.On("Upload", context.TODO(), file, handler).Return("", errors.New("Storage error"))

	_, err := service.CreateFileUpload(file, handler)

	assert.Error(t, err)
	assert.Contains(t, err.Error(), "Storage error")

	mockFileStorage.AssertExpectations(t)
}
